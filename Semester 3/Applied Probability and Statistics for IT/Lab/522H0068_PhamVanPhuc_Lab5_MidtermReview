{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNKRp5o2NHqbaXDqzhhmX4w"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gvA1gLnlIYKL","executionInfo":{"status":"ok","timestamp":1698192532631,"user_tz":-420,"elapsed":6921,"user":{"displayName":"Phạm Văn Phúc","userId":"11729190859980759694"}},"outputId":"f3b1ff08-a58f-42a0-b1da-a09673ac8186"},"outputs":[{"output_type":"stream","name":"stdout","text":["'a) Probability of both dice are the same : 0.166459\n","'b) Probability of both dice are the same : 0.833517\n","'c) Probability of both dice are even : 0.250334\n"]}],"source":["#exercise1\n","import random\n","n = 1000000;\n","\n","#a -  Both dice are the same\n","count1 = 0\n","for i in range(n):\n","  die1 = random.randint(1, 6)\n","  die2 = random.randint(1, 6)\n","  if die1 == die2:\n","      count1 += 1\n","print(\"'a) Probability of both dice are the same :\", end =\" \")\n","print(count1/n)\n","\n","#b - Both dice are different\n","count2 = 0\n","for i in range(n):\n","  die1 = random.randint(1, 6)\n","  die2 = random.randint(1, 6)\n","  if die1 != die2:\n","      count2 += 1\n","print(\"'b) Probability of both dice are the same :\", end =\" \")\n","print(count2/n)\n","\n","#c - Both dice are even\n","count3 = 0\n","for i in range(n):\n","  die1 = random.randint(1, 6)\n","  die2 = random.randint(1, 6)\n","  if (die1 % 2 == 0) and (die2 %2 == 0):\n","      count3 += 1\n","print(\"'c) Probability of both dice are even :\", end =\" \")\n","print(count3/n)"]},{"cell_type":"code","source":["#exercise2\n","from fractions import Fraction\n","def P(event, space):\n","  return Fraction (len(event & space), len(space))\n","def cross(A, B):\n","  return {a + b for a in A for b in B}\n","\n","urn = cross('B', '12') | cross('R', '123') | cross('W', '12345')\n","\n","import itertools\n","def combos(items , n):\n","  return {' '.join(combo) for combo in itertools.combinations(items , n)}\n","U3 = combos(urn, 3)\n","\n","#a - All 3 balls are same color\n","red3 = {s for s in U3 if s.count('R') == 3}\n","white3 = {s for s in U3 if s.count('W') == 3}\n","print(\"'a) Probability of all 3 balls are same color :\", end = \" \")\n","print(P(red3, U3) + P(white3,U3))\n","\n","#d - There are 2 red balls and 1 white ball.\n","r2w1 = {s for s in U3 if s.count('R') == 2 and s.count('W') == 1}\n","print(\"'d) Probability of there are 2 red balls and 1 white ball \", end = \" \")\n","print(P(r2w1,U3))\n","\n","#e - List all the cases that all 3 balls are white\n","print(\"e') List all the cases that all 3 balls are white\")\n","print(white3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"72-3aIZpKay8","executionInfo":{"status":"ok","timestamp":1698193793501,"user_tz":-420,"elapsed":6,"user":{"displayName":"Phạm Văn Phúc","userId":"11729190859980759694"}},"outputId":"e642aa6e-cc6c-43a7-fa28-d37b39c780e7"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["'a) Probability of all 3 balls are same color : 11/120\n","'d) Probability of there are 2 red balls and 1 white ball  1/8\n","e') List all the cases that all 3 balls are white\n","{'W3 W5 W2', 'W3 W1 W5', 'W4 W3 W5', 'W4 W3 W1', 'W4 W5 W2', 'W4 W1 W5', 'W3 W1 W2', 'W4 W1 W2', 'W4 W3 W2', 'W1 W5 W2'}\n"]}]},{"cell_type":"code","source":["#exercise 3\n","import random\n","from itertools import product\n","Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'}\n","Suits = {'♡', '♢', '♣', '♠'}\n","Cards = list(product(Ranks , Suits))\n","\n","#a - All 4 cards are from the same suit.\n","def simulator_poker1(n):\n","  count = 0\n","  for i in range(n):\n","    count1 = 0\n","    count2 = 0\n","    count3 = 0\n","    count4 = 0\n","    pick = random.sample(Cards,4)\n","    #heart\n","    for j in pick:\n","      if (j[1] == '♡'):\n","        count1 +=1;\n","    #diamonds\n","    for j in pick:\n","      if (j[1] == '♢'):\n","        count2 +=1;\n","    #clubs\n","    for j in pick:\n","      if (j[1] == '♣'):\n","        count3 +=1\n","    #spades\n","    for j in pick:\n","      if (j[1] == '♠'):\n","        count4 +=1\n","\n","    if (count1 == 4 or count2 == 4 or count3 == 4 or count4 == 4):\n","      count+=1;\n","  return count/n\n","\n","print(\"'a) Probabitity of all 4 cards are from the same suit :\", end = \" \")\n","print(simulator_poker1(10000))\n","\n","#c -  All 4 cards are same color\n","def simulator_poker2(n):\n","  count = 0\n","  for i in range(n):\n","    count1 = 0\n","    count2 = 0\n","    pick = random.sample(Cards,4)\n","    #black\n","    for j in pick:\n","      if (j[1] == '♡' or j[1] == '♢'):\n","        count1 +=1\n","      else :\n","        count2 += 1\n","\n","    if (count1 == 4 or count2 == 4):\n","      count+=1;\n","  return count/n\n","\n","print(\"'c) Probabitity of all 4 cards are same color :\", end = \" \")\n","print(simulator_poker2(10000))\n","\n","#f - All 4 cards are faces.\n","def simulator_poker3(n):\n","  count = 0\n","  for i in range(n):\n","    count1 = 0\n","    pick = random.sample(Cards,4)\n","    for j in pick:\n","      if (j[0] == 'J' or j[0] == 'Q' or j[0] == 'K'):\n","        count1 += 1\n","    if (count1 == 4 ):\n","      count+=1;\n","  return count/n\n","print(\"'f) Probabitity of all all 4 cards are faces :\", end = \" \")\n","print(simulator_poker3(10000))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDnHD2LMQRgr","executionInfo":{"status":"ok","timestamp":1698195319301,"user_tz":-420,"elapsed":307,"user":{"displayName":"Phạm Văn Phúc","userId":"11729190859980759694"}},"outputId":"73403779-93e5-4b6e-934a-55c1e742551e"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["'a) Probabitity of all 4 cards are from the same suit : 0.0104\n","'c) Probabitity of all 4 cards are same color : 0.1061\n","'f) Probabitity of all all 4 cards are facesr : 0.0012\n"]}]},{"cell_type":"code","source":["#exercise4\n","#a\n","urn = cross('W', '12') | cross('B', '123') | cross('R', '1234')\n","print(\"'a) URN :\")\n","print(urn)\n","\n","#b\n","import itertools\n","def combos(items , n):\n","  return {' '.join(combo) for combo in itertools.combinations(items , n)}\n","U3 = combos(urn, 3)\n","print(\"'b) U3 :\")\n","print(U3)\n","\n","#c\n","white1blue1red1 = {s for s in U3 if s.count('R') == 1 and s.count('W') == 1 and s.count('B') == 1}\n","print(\"'c) List all the cases that 3 balls in question (b) including 1 white ball, 1 blue ball, and 1 red ball :\")\n","print(white1blue1red1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A4J33FSPVD7_","executionInfo":{"status":"ok","timestamp":1698196040459,"user_tz":-420,"elapsed":6,"user":{"displayName":"Phạm Văn Phúc","userId":"11729190859980759694"}},"outputId":"df0f0355-2f73-49a9-f1bc-19d752eb9a9f"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["'a) URN :\n","{'B2', 'R1', 'B3', 'B1', 'R4', 'R3', 'R2', 'W1', 'W2'}\n","'b) U3 :\n","{'B2 R1 R2', 'B2 R4 W2', 'B3 R2 W2', 'B3 R4 R3', 'B1 R4 R2', 'R1 R3 R2', 'B2 B3 B1', 'B2 B1 R3', 'B2 R4 W1', 'B2 W1 W2', 'R3 W1 W2', 'R3 R2 W1', 'R1 R4 W1', 'B3 R4 W2', 'R1 B3 W1', 'R1 W1 W2', 'B2 B1 R4', 'B2 R1 R4', 'R4 R3 R2', 'B3 B1 R4', 'B2 R1 B3', 'R1 R2 W2', 'B2 B1 W2', 'B3 R4 W1', 'B1 R4 R3', 'B3 R3 W1', 'B2 R3 W1', 'R1 B3 R4', 'B1 R4 W1', 'B2 R3 W2', 'R3 R2 W2', 'R4 R2 W2', 'B1 W1 W2', 'B1 R3 W2', 'R1 R3 W1', 'B2 R1 W2', 'R1 B1 R3', 'B3 R2 W1', 'B3 B1 W2', 'R1 R4 W2', 'R1 R2 W1', 'B1 R2 W1', 'R4 R3 W2', 'B3 W1 W2', 'B2 B1 W1', 'B3 R3 R2', 'B2 R3 R2', 'R1 B3 R3', 'B2 B3 W2', 'B3 B1 R2', 'R1 R4 R2', 'B2 B3 R2', 'B3 R4 R2', 'R1 B3 W2', 'B1 R3 W1', 'R4 W1 W2', 'B2 R1 R3', 'B2 R1 B1', 'B2 B3 W1', 'B1 R3 R2', 'R1 B1 R2', 'R4 R2 W1', 'R1 B1 R4', 'R1 B1 W2', 'R1 R4 R3', 'B2 B3 R3', 'R1 R3 W2', 'B3 B1 W1', 'B2 R1 W1', 'B1 R2 W2', 'B2 R2 W2', 'B1 R4 W2', 'B2 R4 R3', 'B2 R2 W1', 'B2 B3 R4', 'R4 R3 W1', 'B2 B1 R2', 'B3 R3 W2', 'B2 R4 R2', 'R1 B3 R2', 'R1 B3 B1', 'R1 B1 W1', 'R2 W1 W2', 'B3 B1 R3'}\n","'c) List all the cases that 3 balls in question (b) including 1 white ball, 1 blue ball, and 1 red ball :\n","{'B3 R2 W1', 'R1 B1 W2', 'B1 R2 W1', 'B2 R4 W2', 'B3 R2 W2', 'B3 R4 W1', 'B3 R3 W1', 'B2 R1 W1', 'B1 R2 W2', 'B2 R2 W2', 'B1 R4 W2', 'B2 R4 W1', 'B2 R3 W1', 'B1 R4 W1', 'B2 R2 W1', 'B1 R3 W1', 'R1 B3 W2', 'B2 R3 W2', 'B3 R4 W2', 'R1 B3 W1', 'B3 R3 W2', 'B1 R3 W2', 'B2 R1 W2', 'R1 B1 W1'}\n"]}]},{"cell_type":"code","source":["#exercise5\n","\n","#a - Theoretical Probability\n","from itertools import combinations\n","straight_combinations = 10\n","total_combinations = len(list(combinations(range(52), 5)))\n","theoretical_probability = straight_combinations / total_combinations\n","print(\"Theoretical Probability:\", theoretical_probability)\n","\n","#b Practical probability\n","import random\n","from itertools import product\n","Ranks = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13} # J =11, Q = 12, K = 13\n","Suits = {'♡', '♢', '♣', '♠'}\n","Cards = list(product(Ranks , Suits))\n","\n","def is_straight(pick):\n","    sorted_pick = sorted(pick, key=lambda j: j[0])\n","    for i in range(1, len(sorted_pick)):\n","        if sorted_pick[i][0] != sorted_pick[i-1][0] + 1:\n","            return False\n","    return True\n","\n","def practical_probability(n):\n","    straight_count = 0\n","    for _ in range(n):\n","        random_pick = random.sample(Cards, 5)\n","        if is_straight(random_pick):\n","            straight_count += 1\n","    probability = straight_count / n\n","    return probability\n","\n","print(\"Practical Probability:\", practical_probability(10000))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YTVN1rsYXjJa","executionInfo":{"status":"ok","timestamp":1698199860754,"user_tz":-420,"elapsed":570,"user":{"displayName":"Phạm Văn Phúc","userId":"11729190859980759694"}},"outputId":"a9a0e312-cf6a-4674-e4ac-ecfd26d9ad55"},"execution_count":95,"outputs":[{"output_type":"stream","name":"stdout","text":["Theoretical Probability: 3.8476929233231755e-06\n","Practical Probability: 0.0018\n"]}]},{"cell_type":"code","source":["#exercise 6\n","#a\n","E = {0,1,2,3,4,5}\n","numbers = []\n","for i in E:\n","  if (i != 0) :\n","    for j in E:\n","      for k in E:\n","        number = i*100 + j*10 + k\n","        numbers.append(number)\n","print(\"a'Print the list of 3-digit numbers) \")\n","print(numbers)\n","\n","#b\n","from itertools import permutations\n","four_digit_numbers = []\n","for j in permutations(E, 4):\n","    number = int(\"\".join(map(str, j)))\n","    if (len(str(number)) == 4) :\n","      four_digit_numbers.append(number)\n","print(\"List of 4-digit numbers with distinct digits:\")\n","print(four_digit_numbers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Umir1cKTdpg4","executionInfo":{"status":"ok","timestamp":1698198875961,"user_tz":-420,"elapsed":5,"user":{"displayName":"Phạm Văn Phúc","userId":"11729190859980759694"}},"outputId":"585b5388-d9ba-4ba4-b87c-ee3840999917"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["a'Print the list of 3-digit numbers) \n","[100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 140, 141, 142, 143, 144, 145, 150, 151, 152, 153, 154, 155, 200, 201, 202, 203, 204, 205, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243, 244, 245, 250, 251, 252, 253, 254, 255, 300, 301, 302, 303, 304, 305, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 324, 325, 330, 331, 332, 333, 334, 335, 340, 341, 342, 343, 344, 345, 350, 351, 352, 353, 354, 355, 400, 401, 402, 403, 404, 405, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 430, 431, 432, 433, 434, 435, 440, 441, 442, 443, 444, 445, 450, 451, 452, 453, 454, 455, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 530, 531, 532, 533, 534, 535, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555]\n","180\n","List of 4-digit numbers with distinct digits:\nn"]}]}]}