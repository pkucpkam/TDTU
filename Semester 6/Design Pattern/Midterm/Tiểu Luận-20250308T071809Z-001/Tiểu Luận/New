// Thêm vào BikeController
public void RecoverHealth(float amount)
{
    health += amount;
    if (health > 100.0f) health = 100.0f; // Giới hạn tối đa
    NotifyObservers();
}

// Command mới
namespace Chapter.Command
{
    public class RecoverHealth : Command
    {
        private BikeController _controller;
        private float _amount;

        public RecoverHealth(BikeController controller, float amount)
        {
            _controller = controller;
            _amount = amount;
        }

        public override void Execute()
        {
            _controller.RecoverHealth(_amount);
        }
    }
}

// Cập nhật InputHandler
void Update()
{
    if (!_isReplaying && _isRecording)
    {
        if (Input.GetKeyUp(KeyCode.R)) // Phím R để hồi phục
            _invoker.ExecuteCommand(new RecoverHealth(_bikeController, 20.0f));
    }
}

void OnGUI()
{
    if (GUILayout.Button("Recover Health"))
        _invoker.ExecuteCommand(new RecoverHealth(_bikeController, 20.0f));
}






---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// Interface cho trang bị
namespace Chapter.Strategy
{
    public interface IEquipmentBehaviour
    {
        void Apply(BikeController bike);
    }
}

// Trang bị tăng tốc
public class SpeedBoostEquipment : MonoBehaviour, IEquipmentBehaviour
{
    public void Apply(BikeController bike)
    {
        bike.ToggleTurbo(); // Tạm thời bật turbo
    }
}

// Thêm vào BikeController
public void ApplyEquipment(IEquipmentBehaviour equipment)
{
    equipment.Apply(this);
}

// Cập nhật ClientObserver để thử nghiệm
void OnGUI()
{
    if (GUILayout.Button("Equip Speed Boost"))
        if (_bikeController)
            _bikeController.ApplyEquipment(new SpeedBoostEquipment());
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

