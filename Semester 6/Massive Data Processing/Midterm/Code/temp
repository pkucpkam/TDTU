import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Pass1Driver {
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Singleton Pass");
        job.setJarByClass(Pass1Driver.class);
        job.setMapperClass(Pass1Mapper.class);
        job.setReducerClass(Pass1Reducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Mapper;
import java.io.IOException;

public class Pass1Mapper extends Mapper<LongWritable, Text, Text, IntWritable> {
    private final static IntWritable one = new IntWritable(1);

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        // Bỏ qua dòng header
        if (key.get() == 0 && value.toString().contains("Member_number")) {
            return;
        }

        String[] fields = value.toString().split(",");
        if (fields.length < 2)
            return;

        String customer = fields[0]; // Mã khách hàng
        String date = fields[1]; // Ngày mua sắm

        // Xuất ra cặp <customer, 1>
        context.write(new Text(customer), one);
    }
}

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Reducer;
import java.io.IOException;

public class Pass1Reducer extends Reducer<Text, IntWritable, Text, IntWritable> {
    private final int SUPPORT_THRESHOLD = 2; // Ngưỡng hỗ trợ

    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context)
            throws IOException, InterruptedException {
        int sum = 0;
        for (IntWritable val : values) {
            sum += val.get();
        }

        // Chỉ xuất ra các khách hàng có tần suất ≥ ngưỡng hỗ trợ
        if (sum >= SUPPORT_THRESHOLD) {
            context.write(key, new IntWritable(sum));

        }
    }
}


-----------------------------------------------------------------------------------------------------------------------

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Pass2Driver {
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Pair Pass");
        job.setJarByClass(Pass2Driver.class);
        job.setMapperClass(Pass2Mapper.class);
        job.setReducerClass(Pass2Reducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}


import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class Pass2Mapper extends Mapper<LongWritable, Text, Text, IntWritable> {
    private final static IntWritable one = new IntWritable(1);
    private Set<String> frequentCustomers = new HashSet<>();

    @Override
    protected void setup(Context context) throws IOException, InterruptedException {

        Path path = new Path("/user/midterm/output1/part-r-00000");

        FileSystem fs = FileSystem.get(context.getConfiguration());
        FSDataInputStream inputStream = fs.open(path);
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

        String line;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split("\t");
            if (parts.length == 2) {
                frequentCustomers.add(parts[0]); // ✅ Lưu khách hàng phổ biến vào tập hợp
            }
        }
        reader.close();
    }

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        String[] fields = value.toString().split(",");
        if (fields.length < 2)
            return;

        String customer = fields[0];
        String date = fields[1];

        // ✅ Chỉ xử lý nếu khách hàng nằm trong tập phổ biến
        if (frequentCustomers.contains(customer)) {
            for (String other : frequentCustomers) {
                if (!customer.equals(other)) {
                    // ✅ Tạo cặp và xuất ra key-value
                    String pair = customer + "," + other;
                    context.write(new Text(pair), one);
                }
            }
        }
    }
}

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Reducer;
import java.io.IOException;

public class Pass2Reducer extends Reducer<Text, IntWritable, Text, IntWritable> {
    private final int SUPPORT_THRESHOLD = 2;

    @Override
    protected void reduce(Text key, Iterable<IntWritable> values, Context context)
            throws IOException, InterruptedException {
        int sum = 0;
        for (IntWritable val : values) {
            sum += val.get();
        }
        if (sum >= SUPPORT_THRESHOLD) {
            context.write(key, new IntWritable(sum));
        }
    }
}